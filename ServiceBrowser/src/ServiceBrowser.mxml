<?xml version="1.0" encoding="utf-8"?>
<mx:Application frameRate="60" xmlns:mx="http://www.adobe.com/2006/mxml" layout="vertical" 
	creationComplete="init();" 
	paddingBottom="10" paddingLeft="10" paddingRight="10" paddingTop="10">
	<mx:states>
		<mx:State name="testService">
			<mx:SetProperty target="{rightPanel}" name="visible" value="true"/>
			<mx:SetStyle target="{form1}" name="paddingBottom" value="10"/>
			<mx:SetStyle target="{form1}" name="paddingLeft" value="10"/>
			<mx:SetStyle target="{form1}" name="paddingRight" value="10"/>
			<mx:SetStyle target="{form1}" name="paddingTop" value="10"/>
		</mx:State>
		<mx:State name="testMethod" basedOn="testService">
			<mx:SetProperty target="{output}" name="visible" value="true"/>
			<mx:SetProperty target="{output}" name="height" value="200"/>

		</mx:State>
		
	</mx:states>
	<mx:RemoteObject showBusyCursor="true" destination="amfphp" source="amfphp.DiscoveryService" id="ro">
		<mx:method name="getServices" result="methodTree.dataProvider = event.result"/>
		<mx:method name="describeService" result="describeService(event.result[0])" />
	</mx:RemoteObject>
	<mx:HDividedBox width="100%" height="100%">
		<mx:VBox height="100%">
			<mx:HBox width="100%" verticalAlign="middle">
				<mx:Label fontSize="10" fontWeight="bold" text="Service Browser"/>
				<mx:Spacer width="100%"/>
				<mx:Button label="Settings" visible="false"/>
				<mx:Button label="Refresh" click="ro.getServices();"/>
				
			</mx:HBox>
			<mx:Tree width="100%" 
					 height="100%" 
					 id="methodTree" 
					 openDuration="0"
					 change="onMethodTreeChange()"
					 />
		</mx:VBox>
		<mx:Panel id="rightPanel" visible="false" title="{'Exploring ' + _currentService.label}" height="100%" borderThickness="3" paddingLeft="5" paddingRight="5" paddingBottom="5" paddingTop="5" borderThicknessBottom="3" borderThicknessLeft="3" borderThicknessRight="3" borderThicknessTop="3">
			<mx:VDividedBox label="Test" width="100%" height="100%" paddingBottom="0" paddingLeft="0" paddingRight="0" paddingTop="0">
				<mx:TabNavigator width="100%" height="100%" historyManagementEnabled="false">
					
					<mx:VBox width="100%" label="Test">
						<mx:LinkBar id="methodLinks" itemClick="_currentMethod = _methods[event.item.data]; _currentMethodName = event.item.label; enableLinks();" fontWeight="normal" horizontalGap="0"/>
						<mx:VBox width="100%">
							<mx:Form width="100%"  id="form1">
								<mx:Text fontWeight="bold" htmlText="{'Method: ' + _currentMethodName}" width="100%"/>
								<mx:Text htmlText="{_currentMethod.description}" width="100%"/>
								<mx:Repeater width="100%" recycleChildren="false" id="args" dataProvider="{_currentMethod.arguments}">
									<mx:FormItem width="100%" label="{args.currentItem != null ? args.currentItem : ''}">
										<mx:TextInput id="arg" width="100%"/>
									</mx:FormItem>
								</mx:Repeater>
								<mx:Button label="Call" click="sendRequest();"/>
							</mx:Form>
						</mx:VBox>
					</mx:VBox>
					<mx:VBox label="Code generator">
						<mx:Text text="Not yet implemented." />
					</mx:VBox>
				
				</mx:TabNavigator>
				<mx:TabNavigator creationPolicy="all" id="output" width="100%" paddingTop="0" historyManagementEnabled="false" height="0" visible="false">
					<mx:VBox label="Results" height="100%">
						<mx:TextArea editable="false" focusEnabled="false" height="100%" width="100%" id="resultsText" borderThickness="0"  borderStyle="none"/>
					</mx:VBox>
					<mx:VBox label="RecordSet view" width="100%" height="100%" borderThickness="0">
						<mx:DataGrid width="100%" height="100%" borderStyle="none" id="resultsDg"></mx:DataGrid>
					</mx:VBox>
					<mx:VBox label="Trace" width="100%" height="100%">
						<mx:TextArea editable="false" focusEnabled="false" x="305" y="220" width="100%" height="100%" text="Not yet implemented." borderThickness="0" borderStyle="none"/>
					</mx:VBox>
					<mx:VBox label="Info" width="100%" height="100%">
						<mx:Text text="Text" id="infoText"/>
					</mx:VBox>
					
				</mx:TabNavigator>
			</mx:VDividedBox>
		</mx:Panel>
	</mx:HDividedBox>
	<mx:Script>
		<![CDATA[
			import mx.core.UIComponent;
			import mx.core.Container;
			import mx.controls.dataGridClasses.DataGridColumn;
			import mx.controls.dataGridClasses.DataGridBase;
			import mx.collections.ArrayCollection;
			import mx.utils.ObjectUtil;
			import com.adobe.serialization.json.JSON;
			import mx.controls.List;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
		
			[Bindable]
			private var _methods:Object;
			[Bindable]
			private var _currentService:Object;
			[Bindable]
			private var _currentMethod:Object;
			[Bindable]
			private var _currentMethodName:String;
			
			private var _sro:RemoteObject;
			
			private var _time:Number;
			
			private function init():void{
				setEndPoint(); 
				ro.getServices(); 
				_sro = new RemoteObject("amfphp");
				_sro.addEventListener(ResultEvent.RESULT, onResult);
				_sro.addEventListener(FaultEvent.FAULT, onFault);
			}
			
			private function onMethodTreeChange():void{
				if((methodTree.selectedItem.children is Array)){
					return;
				} 
				_currentService = methodTree.selectedItem; 
				ro.describeService(methodTree.selectedItem);		
			}
			
			private function setEndPoint():void{
				var url:String = Application.application.url;
				if(url.indexOf('http') != -1)
				{
					ro.endpoint = url.substr(0, url.lastIndexOf('/')) +  "gateway.php";
				}
			}
			
			private function describeService(data:Object):void{
				_methods = data;
				var links:Array = new Array();
				for(var i:String in data)
				{
					links.push({label:i, data:i});
				}
				links = links.sortOn("label");
				if(links.length > 0)
				{
					methodLinks.dataProvider = links;
					methodLinks.selectedIndex = 0;
					_currentMethod = _methods[links[0].data];
					_currentMethodName = links[0].data;
					currentState = "testService";
				}
			}
			
			private function sendRequest():void{
				_time = getTimer();
				_currentMethodName = methodLinks.dataProvider[methodLinks.selectedIndex].data;
				_sro.source = _currentService.data.split('/').join('.').split('\\').join('.') + _currentService.label;
				_sro[_currentMethodName].send.apply(null, getArgs());	
			}
			
			private function getArgs():Array{
				var parsedArgs:Array = new Array();
				if(arg is Array)
				{
					for(var i:int = 0; i < arg.length; i++)
					{
						try
						{
							var text:String = arg[i].text;
							if(text.indexOf('{') == -1 && 
							   text.indexOf('[') == -1 &&
							   text.indexOf('"') == -1 &&
							   text.indexOf("'") == -1)
							{
								var val:Number = parseInt(text);
								if(isNaN(val))
								{
									text = '"' + text + '"';
								}
							}
							parsedArgs.push(JSON.decode(text));
						}
						catch(e:*)
						{
							
						}
					}
				}
				return parsedArgs;
			}
			
			private function onResult(event:ResultEvent):void{
				currentState = "testMethod";
				resultsText.text = ObjectUtil.toString(event.result);
				infoText.text = "Query took: " + (getTimer() - _time) + " ms";
				
				if((event.result is Array && event.result[0] is Object) ||
				   (event.result is ArrayCollection && event.result.getItemAt(0) is Object))
				{
					var keys:Array = new Array();
					for(var i:String in event.result[0])
					{
						keys.push(new DataGridColumn(i));
					}
					resultsDg.columns = keys;
					resultsDg.dataProvider = event.result;
				}
				else
				{
					resultsDg.columns = new Array();
					resultsDg.dataProvider = new Array();
				}
				output.selectedIndex = 0;
			}
			
			private function onFault(event:FaultEvent):void{
				currentState = "testMethod";
				resultsText.text = ObjectUtil.toString(event.fault);
				infoText.text = "Query took: " + (getTimer() - _time) + " ms";
				resultsDg.dataProvider = new Array();
				output.selectedIndex = 0;
			}
			
			private function enableLinks():void{
				for(var i:int = 0; i < methodLinks.numChildren; i++){
			    	var curItem:UIComponent = methodLinks.getChildAt(i) as UIComponent;
			    	curItem.enabled = i == methodLinks.selectedIndex ? false : true;
			  	}
			}
		]]>
	</mx:Script>
</mx:Application>
